@page "/listadousuarios"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@rendermode InteractiveServer
@inject ListarUsuariosUseCase listarUsuariosUseCase
@inject BajaUsuarioUseCase bajaUsuario
@inject IServicioAutorizacion autorizacion
@inject ISesion sesion

<h3>Listado de usuarios</h3>
@if(esAdmin)
{
    <button class="btn btn-primary">
        <span class="bi bi-plus" aria-hidden="true" @onclick="OnShowModalClick"></span> 
    </button> 
}

<table class= "table">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Correo Electrónico</th>
            <th>Permisos</th>
             @if (esAdmin)
            {
                <th>Acciones</th> <!--- Solo se ve si tengo el permiso (soy administrador) --->
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var u in _lista)
        {
            <tr>
                <td>@u.Nombre</td>
                <td>@u.Apellido</td>
                <td>@u.CorreoElectronico</td>
                <td>@string.Join(", ", u.Permisos.Select(p => p.ToString()))</td>
                @if (esAdmin)
                {
                  <td>  
                      <button class="btn btn-primary" @onclick="()=>OnShowModalClickEdit(u)">
                            <span class="bi bi-pencil" aria-hidden="true"></span> 
                      </button>
                      <button class="btn btn-danger">
                            <span class="bi bi-trash" aria-hidden="true" @onclick="()=>ShowSaveConfirmationAsync(u.Id)"></span>
                      </button>
                  </td>
                }
            </tr>
        }
        @if(AlertError)
        {
            <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
        }

        @if(AlertSucces)
        {
            <div>
                <Alert Color="AlertColor.Success"> <h4>Se borró con exito!</h4></Alert>
            </div>
        }
         
    </tbody>
</table>
<Modal @ref="modal" Title="Agregar usuario" IsVerticallyCentered="true" UseStaticBackdrop="true"  >
    <BodyTemplate>
            <AltaUsuarioCDU/>
            <div style="display: flex; justify-content: flex-end;">
                <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Cerrar</Button>
            </div>
    </BodyTemplate>
</Modal>
<Modal @ref="modal2" Title="Editar usuario" IsVerticallyCentered="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <ModificarUsuarioCDU usuarioEditar="@editar"  />
        <div style="display: flex; justify-content: flex-end;">
            <Button Color="ButtonColor.Danger" @onclick="OnHideModalClickEdit">Cerrar</Button>
        </div>
    </BodyTemplate>
</Modal>
<ConfirmDialog @ref="dialog" />


@code {
        
    bool esAdmin=false;
    private bool AlertError = false;
    private bool AlertSucces = false;
    string? errorMessage;
    private Modal? modal;
    private Modal? modal2;
    public int idSeleccionado;
    public Usuario? editar;
    List<Usuario> _lista = new List<Usuario>();
        
    protected override void OnInitialized()
    {
        AlertError = false;
        AlertSucces= false;
        _lista = listarUsuariosUseCase.Ejecutar(); 
        var usuarioActual = sesion.ObtenerUsuarioActivo();
        esAdmin = usuarioActual != null && autorizacion.PoseeElPermiso(usuarioActual, Permiso.Administrador);
    }
    private ConfirmDialog? dialog;

    private  void Eliminar(int idUsuario)
    {   
        Usuario? usu = sesion.ObtenerUsuarioActivo();

       if(usu != null&& autorizacion.PoseeElPermiso(usu, Permiso.Administrador))
        {
            try
            {
               bajaUsuario.Ejecutar(idUsuario, usu);
               AlertSucces = true;
               OnInitialized();

            }catch(Exception ex)
            {   
                AlertError=true;
                errorMessage = $"Error: {ex}";
            }
        }
       

    }
    private async Task ShowSaveConfirmationAsync(int idUsuario)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Si",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        if(dialog!= null)
        {
            var confirmation = await dialog.ShowAsync(
            title: "Eliminar",
            message1: "¿Estas seguro que queres eliminar el usuario?",
            confirmDialogOptions: options);
            if (confirmation)
            {
                Eliminar(idUsuario);
            }
        }
        
    }
    private async Task OnShowModalClick()
    {
        if (modal != null)
        {
            await modal.ShowAsync();
        }
    }
     
    private async Task OnShowModalClickEdit(Usuario e)
    {
        editar =e;
        if (modal2 != null)
        {
            await modal2.ShowAsync();
        }
        OnInitialized();
    }

    private async Task OnHideModalClick()
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
        OnInitialized(); 
    }
    private async Task OnHideModalClickEdit()
    {
        
        if(modal2!= null)
        {
            await modal2.HideAsync();
        }
        
       
        OnInitialized(); 
    }
    

}
