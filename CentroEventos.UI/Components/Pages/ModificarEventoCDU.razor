@using static CentroEventos.UI.Components.Pages.ListarEventosCDU
@rendermode InteractiveServer
@inject ModificarEventoUseCase modificarEvento
@inject ISesion sesion
@inject IRepositorioPersona RepoPersona

<div class="row g-3 align-items-center body-custom">
    @if (eventoVM != null)
    {
        <div class="row-auto">
            <label class="col-form-label">Nombre</label>
        </div>
        <div class="row-auto">
            <input class="form-control" type="text" @bind-value="eventoVM.Nombre" />
        </div>

        <div class="row-auto">
            <label class="col-form-label">Descripción</label>
        </div>
        <div class="row-auto">
            <input class="form-control" type="text" @bind-value="eventoVM.Descripcion" />
        </div>

        <div class="row-auto">
            <label class="col-form-label">Fecha de inicio</label>
        </div>
        <div class="row-auto">
            <input class="form-control" type="datetime-local" @bind-value="eventoVM.FechaHoraInicio" />
        </div>

        <div class="row-auto">
            <label class="col-form-label">Duración (horas)</label>
        </div>
        <div class="row-auto">
            <input class="form-control" type="number" step="0.1" @bind-value="eventoVM.DuracionHoras" />
        </div>

        <div class="row-auto">
            <label class="col-form-label">Cupo máximo</label>
        </div>
        <div class="row-auto">
            <input class="form-control" type="number" @bind-value="eventoVM.CupoMaximo" />
        </div>

        <div class="row-auto">
            <label class="col-form-label">Responsable</label>
        </div>
        <div class="row-auto">
            <select class="form-control" @bind="eventoVM.ResponsableId">
                <option disabled selected value="0">Seleccione un responsable</option>
                @foreach (var persona in responsablesDisponibles)
                {
                    <option value="@persona.Id">@persona.Nombre @persona.Apellido</option>
                }
            </select>
        </div>

        <Button Color="ButtonColor.Secondary" @onclick="Modificar">Guardar Cambios</Button>
        @if (alert)
        {
            <Alert Color="AlertColor.Success">
                <h4 class="alert-heading">Modificación completada</h4>
                <p>El evento fue actualizado correctamente.</p>
                <hr />
            </Alert>
        }
         @if (alert2)
        {
            <Alert Color="AlertColor.Danger">
                <h4 class="alert-heading">Error:@mensajeError </h4>
                
                <hr />
            </Alert>
        }
    
    }
</div>

@code {
    [Parameter]
    public eventoViewModel? eventoVM { get; set; }
    List<Persona> responsablesDisponibles = new();
    bool alert = false;
    bool alert2 = false;
    string? mensajeError;

    protected override void OnInitialized()
    {
        responsablesDisponibles = RepoPersona.ListadoPersona();
    }
   

    public void Modificar()
    {
        Usuario? usuarioActual = sesion.ObtenerUsuarioActivo(); 
        try
        {
            if (usuarioActual == null)
            {
                throw new Exception("Inicie sesión para modificar el evento.");
            }
            if (!string.IsNullOrEmpty(eventoVM?.Nombre) &&
                !string.IsNullOrEmpty(eventoVM.Descripcion) &&
                eventoVM.FechaHoraInicio != default &&
                eventoVM.DuracionHoras > 0 &&
                eventoVM.CupoMaximo > 0 &&
                eventoVM.ResponsableId > 0)
            {
                EventoDeportivo evento = new EventoDeportivo(
                    eventoVM.Nombre,
                    eventoVM.Descripcion,
                    eventoVM.FechaHoraInicio,
                    eventoVM.DuracionHoras,
                    eventoVM.CupoMaximo,
                    eventoVM.ResponsableId
                );
                evento.Id = eventoVM.Id;
                modificarEvento.Ejecutar(evento, usuarioActual);
                alert = true;
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
            alert2 = true;
        }
    }
}
