@page "/listadoeventos"
@rendermode InteractiveServer

@inject ListarEventosUseCase listarEventosUseCase
@inject ListarPersonasUseCase repoPersona
@inject BajaEventoUseCase bajaEvento
@inject IRepositorioReserva repoReservas
@inject IServicioAutorizacion autorizacion
@inject ISesion sesion


<h3>Listado de Eventos Deportivos</h3>

@if(esAdmin)
{
    <button class="btn btn-primary">
        <span class="bi bi-plus " aria-hidden="true" @onclick="OnShowModalClick"></span> 
    </button> 
}

@if (_eventos is null)
{
    <p>Cargando eventos...</p>
}
else if (_eventos.Count == 0)
{
    <p>No hay eventos registrados.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Responsable</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Fecha y hora de Inicio</th>
                <th>Duración de horas</th>
                <th>Cupo máximo</th>
                @if (esAdmin)
                {
                  <th>Acciones</th>
                  <!--- Solo se ve si tengo el permiso (soy administrador) --->
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var e in listaEvento)
            {
                <tr>
                    <td>@($"{e.persona?.Nombre} {e.persona?.Apellido}")</td>
                    <td>@e.Nombre</td>
                    <td>@e.Descripcion</td>
                    <td>@e.FechaHoraInicio.ToString("dd/MM/yyyy")</td>
                    <td>@e.DuracionHoras</td>
                    <td>@e.CupoMaximo</td>
                    @if (esAdmin)
                    {
                      <td>  
                        <button class="btn btn-primary" @onclick="()=>OnShowModalClickEdit(e)">
                            <span class="bi bi-pencil " aria-hidden="true"></span> 
                        </button>
                        <button class="btn btn-danger">
                          <span class="bi bi-trash" aria-hidden="true" @onclick="()=>ShowSaveConfirmationAsync(e.Id)"></span>
                         </button>
                      </td>
                    }   
                </tr>
            }
            @if(AlertError)
            {
                <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
            }

            @if(AlertSucces)
            {
                <div>
                    <Alert Color="AlertColor.Success"> <h4>Se borró con éxito!</h4></Alert> 
                </div>
            }
        </tbody>
    </table>
}

<Modal @ref="modal" Title="Agregar evento" IsVerticallyCentered="true" UseStaticBackdrop="true"  >
    <BodyTemplate>
            <AltaEventoCDU/>
            <div style="display: flex; justify-content: flex-end;">
                <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Cerrar</Button>
            </div>
    </BodyTemplate>
</Modal>

<Modal @ref="modal2" Title="Editar evento" IsVerticallyCentered="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <ModificarEventoCDU eventoVM="@editar"  />
        <div style="display: flex; justify-content: flex-end;">
            <Button Color="ButtonColor.Danger" @onclick="OnHideModalClickEdit">Cerrar</Button>
        </div>
    </BodyTemplate>
</Modal>
<ConfirmDialog @ref="dialog" />

@code{
    bool esAdmin=false;
    private bool AlertError = false;
    private bool AlertSucces = false;
    string? errorMessage;
    private Modal? modal;
    private Modal? modal2;
    public eventoViewModel? editar;
    private List<EventoDeportivo>? _eventos;
    private eventoViewModel eventoView = new ();
    private List<eventoViewModel> listaEvento = new ();
    
    public class eventoViewModel
    {
        public int Id { get; set; }
        public string? Nombre { get; set; }
        public string? Descripcion { get; set; }
        public DateTime FechaHoraInicio { get; set; }
        public double DuracionHoras { get; set; }
        public int CupoMaximo { get; set; }
        public int ResponsableId { get; set; }
        public Persona? persona  { get; set; }
    }

    protected override void OnInitialized()
    {
        AlertError = false;
        AlertSucces= false;
        _eventos = listarEventosUseCase.Ejecutar();
        listaEvento =  crearLista(_eventos);
        var usuarioActual = sesion.ObtenerUsuarioActivo();
        esAdmin = usuarioActual != null && autorizacion.PoseeElPermiso(usuarioActual, Permiso.Administrador);
    }

    public List<eventoViewModel> crearLista (List<EventoDeportivo> eventos)
    {
        List<eventoViewModel> lista = new ();
        var Personas = repoPersona.Ejecutar(); 
        if (_eventos != null)
        {
            foreach (var e in _eventos)
            {
               eventoViewModel eventoView = new()
                {
                    Id = e.Id,
                    Nombre = e.Nombre,
                    Descripcion = e.Descripcion,
                    FechaHoraInicio = e.FechaHoraInicio,
                    DuracionHoras = e.DuracionHoras,
                    CupoMaximo = e.CupoMaximo,
                    ResponsableId = e.ResponsableId,
                    persona = Personas.FirstOrDefault(p => p.Id == e.ResponsableId)
                };
                lista.Add(eventoView);
            }
            return lista;
        }
        else
        {
             return lista;
        }
        
    }

    private ConfirmDialog? dialog;

    private void Eliminar(int idEvento)
    {   
        Usuario? usuarioActual = sesion.ObtenerUsuarioActivo();

        if(usuarioActual != null && autorizacion.PoseeElPermiso(usuarioActual, Permiso.Administrador))
        {
            try
            {
                bajaEvento.Ejecutar(repoReservas, idEvento, usuarioActual);
                AlertSucces = true;
               OnInitialized();
            }
            catch(Exception ex)
            {   
                AlertError=true;
                errorMessage = $"Error: {ex}";
            }
        }
    }
    private async Task ShowSaveConfirmationAsync(int idUsuario)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Si",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        if(dialog!= null)
        {
            var confirmation = await dialog.ShowAsync(
            title: "Eliminar",
            message1: "¿Estas seguro que queres eliminar el usuario?",
            confirmDialogOptions: options);
            if (confirmation)
            {
                Eliminar(idUsuario);
            }
        }
        
    }

     private async Task OnShowModalClick()
    {
        if (modal != null)
        {
            await modal.ShowAsync();
        }
    }

    private async Task OnShowModalClickEdit (eventoViewModel e)
    {
        editar = e;
        if (modal2 != null)
        {
            await modal2.ShowAsync();
        }
       OnInitialized();
    }

    private async Task OnHideModalClick()
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
         OnInitialized();
    }

    private async Task OnHideModalClickEdit()
    {
        
        if(modal2!= null)
        {
            await modal2.HideAsync();
        }
        OnInitialized();
    }
}