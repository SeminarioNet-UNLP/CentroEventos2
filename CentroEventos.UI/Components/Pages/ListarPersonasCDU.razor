@page "/listadopersonas"

@rendermode InteractiveServer
@inject ListarPersonasUseCase listarPersonasUseCase
@inject AsignarPermisosUseCase asignarPermisos
@inject IServicioAutorizacion autorizacion

@inject BajaPersonaUseCase bajaPersona
@inject ISesion sesion


<h3>Listado de personas</h3>
@if(esAdmin)
{
    <button class="btn btn-primary">
        <span class="bi bi-plus" aria-hidden="true" @onclick="OnShowModalClick"></span> 
    </button> 
}

@if (_personas is null)
{
    <p>Cargando personas...</p>
}
else if (_personas.Count == 0)
{
    <p>No hay personas registradas.</p>
}
else
{
    <table class= "table">
        <thead>
            <tr>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Telefono</th>
                @if (esAdmin)
                {
                    <th>Acciones</th> <!--- Solo se ve si tengo el permiso (soy administrador) --->
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var p in listaPersona)
            {
                <tr>
                    <td>@p.Dni</td>
                    <td>@p.Nombre</td>
                    <td>@p.Apellido</td>
                    <td>@p.Email</td>
                    <td>@p.Telefono</td>
                    @if(esAdmin) 
                    {
                        <td>  
                            <button class="btn btn-primary" @onclick="()=>OnShowModalClickEdit(p)">
                                <span class="bi bi-pencil " aria-hidden="true"></span> 
                            </button>
                            <button class="btn btn-danger">
                                <span class="bi bi-trash" aria-hidden="true"></span>
                            </button>
                        </td>
                    }
                </tr>
            }
            
            @if(AlertError)
            {
                <Alert Color="AlertColor.Danger"> @errorMessage </Alert>
            }

            @if(AlertSucces)
            {
                <div>
                    <Alert Color="AlertColor.Success"> <h4>Se borró con éxito!</h4></Alert> 
                </div>
            }
        </tbody>
    </table>
}


<Modal @ref="modal" Title="Agregar persona" IsVerticallyCentered="true" UseStaticBackdrop="true"  >
    <BodyTemplate>
            <AltaPersonaCDU/>
            <div style="display: flex; justify-content: flex-end;">
                <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Cerrar</Button>
            </div>
    </BodyTemplate>
</Modal>
<Modal @ref="modal2" Title="Editar persona" IsVerticallyCentered="true" UseStaticBackdrop="true">
    <BodyTemplate>
        <ModificarPersonaCDU personaVM="@editar"  />
       
        <div style="display: flex; justify-content: flex-end;">
            <Button Color="ButtonColor.Danger" @onclick="OnHideModalClickEdit">Cerrar</Button>
        </div>
    </BodyTemplate>
</Modal>
<ConfirmDialog @ref="dialog" />

@code {
        
    bool esAdmin=false;
    private bool AlertError = false;
    private bool AlertSucces = false;
    string? errorMessage;
    private Modal? modal;
    private Modal? modal2;
    public personaViewModel? editar;
    private List<Persona>? _personas;
    private personaViewModel personaView = new ();
    private List<personaViewModel> listaPersona = new ();
    
    public class personaViewModel
    {
        public int Id { get; set; }
        public string? Dni { get; set; }
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public string? Email { get; set; }
        public string? Telefono { get; set; }
    }
  
    protected override void OnInitialized()
    {
        AlertError = false;
        AlertSucces= false;
        _personas = listarPersonasUseCase.Ejecutar(); 
        listaPersona= crearLista (_personas);
        var usuarioActual = sesion.ObtenerUsuarioActivo();
        esAdmin = usuarioActual != null && autorizacion.PoseeElPermiso(usuarioActual, Permiso.Administrador);
    }
    
    public List<personaViewModel> crearLista (List<Persona> personas)
    {
        List<personaViewModel> lista=new();
        var Personas = listarPersonasUseCase.Ejecutar(); 
        if (_personas != null)
        {
            foreach (var p in _personas)
            {
               personaViewModel personaView = new()
                {
                    Id = p.Id,
                    Dni = p.Dni,
                    Nombre = p.Nombre,
                    Apellido = p.Apellido,
                    Email = p.Email,
                    Telefono = p.Telefono,
                };
                lista.Add(personaView);
            }
            return lista;
        }
        else
        {
             return lista;
        }
        
    }

    private ConfirmDialog? dialog;

    private  void Eliminar(int idPersona)
    {   
        Usuario? usuarioActual = sesion.ObtenerUsuarioActivo();

       if(usuarioActual != null&& autorizacion.PoseeElPermiso(usuarioActual, Permiso.Administrador))
        {
            try
            {
               bajaPersona.Ejecutar(idPersona, usuarioActual);
               AlertSucces = true;
               OnInitialized();

            }catch(Exception ex)
            {   
                AlertError=true;
                errorMessage = $"Error: {ex}";
            }
        }
       

    }
    private async Task OnShowModalClick()
    {
        if (modal != null)
        {
            await modal.ShowAsync();
        }
    }
     
    private async Task OnShowModalClickEdit(personaViewModel p)
    {
        editar =p;
        if (modal2 != null)
        {
            await modal2.ShowAsync();
        }
        OnInitialized();
    }

    private async Task OnHideModalClick()
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
        OnInitialized(); 
    }
    private async Task OnHideModalClickEdit()
    {
        
        if(modal2!= null)
        {
            await modal2.HideAsync();
        }
     
       
        OnInitialized(); 
    }
    

}