

@rendermode InteractiveServer
@inject ISesion serviAuth
@inject LoginUseCase login 


<Modal @ref="modal" Title="Iniciar sesion" IsVerticallyCentered="true" UseStaticBackdrop="true">
    <BodyTemplate>

       @if(!isRegistro)  
       {
        <div class="row g-3 align-items-center body-custom">
            <div class="row-auto">
                <label for="inputUsuario" class="col-form-label">Correo electr贸nico</label>
            </div>
            <div class="row-auto">
                <input class="form-control" type="text" placeholder="Ingrese correo electronico" aria-label="default input example"@bind-value="usuarioVM.CorreoElectronico">
            </div>
            <div class="row-auto">
                <label for="inputPassword6" class="col-form-label">Clave</label>
            </div>
            <div class="row-auto">
                <input type="password" id="inputPassword6" class="form-control" aria-describedby="passwordHelpInline" @bind-value="usuarioVM.Clave">
            </div>
        </div>
       }
        @if(isRegistro)
        {
            <AltaUsuarioCDU/>
        }
        @if(alert)
        {
         <Alert Color="AlertColor.Danger">
            <h4 class="alert-heading">Ups ocurri贸 un error</h4>
            <p>@MensajeError</p>
            <hr>
         </Alert>
        }
         @if(alert2)
        {
         <Alert Color="AlertColor.Success">
            <h4 class="alert-heading">Se logue贸 correctamente</h4>
            <p>:)</p>
            <hr>
         </Alert>
        }
    </BodyTemplate>

    <FooterTemplate>
        @if(!isRegistro){
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="IsRegistro">Registrar</Button>
        <Button Color="ButtonColor.Primary"@onclick="Loggear">Login</Button>
        }
    </FooterTemplate>
    
</Modal>


@code {
  

    public class UsuiarioViewModel
    {
        public string? CorreoElectronico { get; set; }
        public string? Clave { get; set;}
    }
     bool isRegistro = false;
     bool alert = false;
     bool alert2 = false;

    private Modal? modal;
    UsuiarioViewModel usuarioVM = new ();
    string? MensajeError;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var usuario = serviAuth.ObtenerUsuarioActivo();
        if(usuario== null)
        {
            if (firstRender && modal != null)
            {
                await modal.ShowAsync();
                StateHasChanged(); 
            }
        }
    }

   private void Loggear()
   {
        Usuario usuario = new Usuario();
        if(usuarioVM.Clave!= null)
        {
            usuario.CorreoElectronico = usuarioVM.CorreoElectronico;
            usuario.Clave = HashingUtil.ConvertirCadena(usuarioVM.Clave);
        }
        try
        {
            login.Ejecutar(usuario);
            alert2 = true;
        }
        catch (Exception ex)
        {
            // Manejo de la excepci贸n
            alert= true;
            MensajeError = ex.Message;
        }
   }
    private void  IsRegistro()
    {
        isRegistro = true;
        alert = false;
        StateHasChanged();
    }
    private async Task OnShowModalClick()
    {
        isRegistro = false;
        alert = false;
        alert2 = false;
        if(modal!= null)
            await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        if(modal!= null)    
            await modal.HideAsync();
        StateHasChanged();
    }
}
    
