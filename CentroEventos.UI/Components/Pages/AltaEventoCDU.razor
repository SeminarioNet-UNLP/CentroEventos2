@rendermode InteractiveServer
@inject AltaEventoUseCase altaEvento
@inject ISesion sesion
@inject IRepositorioPersona RepoPersona
<div class="row g-3 align-items-center body-custom">
    <div class="row-auto">
        <label for="inputUsuario" class="col-form-label">Nombre</label>
    </div>
    <div class="row-auto">
        <input class="form-control" type="text"  aria-label="default input example" @bind-value= "eventoView.Nombre">
    </div>
    <div class="row-auto">
        <label for="inputUsuario" class="col-form-label">Descripcion</label>
    </div>
    <div class="row-auto">
        <input class="form-control" type="text" placeholder="Default input" aria-label="default input example"@bind-value= "eventoView.Descripcion">
    </div>
    <div class="row-auto">
        <label for="inputUsuario" class="col-form-label">Fecha de inicio</label>
    </div>
    <div class="row-auto">
        <DateInput TValue="DateTime" @bind-Value="@eventoView.FechaHoraInicio" Placeholder="Enter Date" />
    </div>
    <div class="row-auto">
        <label for="inputPassword6" class="col-form-label">Duracion en horas del evento</label>
    </div>
    <div class="row-auto">
        <input type="password" id="inputPassword6" class="form-control" aria-describedby="passwordHelpInline"@bind-value= "eventoView.DuracionHoras">
    </div>
     <div class="row-auto">
        <label for="inputPassword6" class="col-form-label">Cupo maximo del evento</label>
    </div>
    <div class="row-auto">
        <input type="password" id="inputPassword6" class="form-control" aria-describedby="passwordHelpInline"@bind-value= "eventoView.CupoMaximo">
    </div>
      <div class="row-auto">
        <label class="col-form-label">Responsable</label>
    </div>
    <div class="row-auto">
        <select class="form-control" @bind="eventoView.ResponsableId">
            <option disabled selected value="0">Seleccione un responsable</option>
            @foreach (var persona in responsablesDisponibles)
            {
                <option value="@persona.Id">@persona.Nombre @persona.Apellido</option>
            }
        </select>
    </div>
    <Button Color="ButtonColor.Secondary" @onclick="Registrar">Registrar</Button>
    <div>
    @if(alert)
    {
     <Alert Color="AlertColor.Success">
        <h4 class="alert-heading">Registro completado!</h4>
        <p>Bienvenido al sistema</p>
        <hr>
     </Alert>
    }
    @if(alert2)
    {
     <Alert Color="AlertColor.Danger">
        <h4 class="alert-heading">Error: @mensajeError</h4>
        <hr>
     </Alert>
    }
    
    </div>
</div>



@code
{
    private class EventoViewModel
    {
        public string? Nombre { get; set; }
        public string? Descripcion { get; set; }
        public DateTime FechaHoraInicio { get; set; }
        public double DuracionHoras { get; set; }
        public int CupoMaximo { get; set; }
        public int ResponsableId { get; set; }
    }
    
    EventoViewModel eventoView = new();
    List<Persona> responsablesDisponibles = new();
    string? mensajeError;
    bool alert = false;
    bool alert2 = false;


     protected override void OnInitialized()
    {
        responsablesDisponibles = RepoPersona.ListadoPersona();
    }
    private void Registrar()
    {   
        Usuario? usuario = sesion.ObtenerUsuarioActivo();
        try 
        {
            if (usuario == null)
            {
                throw new Exception($"Error en el registro: Inicie sesion para poder registrar un evento.");
            }
           
             List<EventoDeportivo> permisos = new List<EventoDeportivo>();
             EventoDeportivo evento = new EventoDeportivo(eventoView.Nombre, eventoView.Descripcion, eventoView.FechaHoraInicio, 
                                         eventoView.DuracionHoras,eventoView.CupoMaximo,eventoView.ResponsableId);
             
             altaEvento.Ejecutar(evento,usuario);
             alert = true;
            
        }
        catch (Exception ex)
        {
            mensajeError =ex.Message;
            alert2=true;
        }
    }

}    